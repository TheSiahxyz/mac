### --- Basic Settings --- ###
set autoquit true
# set cleaner '~/.config/lf/cleaner'
# set cleaner '~/.config/lf/lf_kitty_clean'
set cleaner '~/.config/lf/cleaner'
# set dircounts true
set drawbox
set dupfilefmt '%f_%n'
set filesep "\n"  # default already
# set hidden true
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set ignorecase true
set icons true
set ifs "\n"
set mouse true
set number true
set period 1
# set previewer '~/.config/lf/lf_kitty_preview'
set previewer '~/.config/lf/scope'
# set previewer '~/.config/lf/scope-lf-wrapper'
# set ratios 1:2:3:5
set relativenumber true
set scrolloff 10
# set shell zsh
set shellopts '-eu'


### --- Custom Functions --- ###
# cmds/functions
# cmd open-with ${{
#     clear
#     set -f
#     rifle -l $fx | sed -e "s/:[a-Z]*:[a-Z]*:/ \| /"
#     read -p "open with: " method
#     rifle -p $method $fx
# }}
#
cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) localc $fx ;;
    image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
        text/*|application/json|inode/x-empty|application/x-subrip) $EDITOR $fx;;
    image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
    image/svg+xml) display -- $f ;;
    image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)\(_large\)*$" |
        setsid -f nsxiv -aio 2>/dev/null | while read -r file; do
            [ -z "$file" ] && continue
            lf -remote "send select \"$file\""
            lf -remote "send toggle"
        done &
        ;;
    audio/*|video/x-ms-asf) mpv --audio-display=no $f ;;
    video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
    application/pdf|application/vnd.djvu|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
    application/pgp-encrypted) $EDITOR $fx ;;
    application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text|application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template|application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint|application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template|application/vnd.oasis.opendocument.formula|application/vnd.oasis.opendocument.database) setsid -f libreoffice $fx >/dev/null 2>&1 ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

cmd extract ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
    printf "extract?[y/N]"
    read ans
    [ $ans = "y" ] && {
        case $fx in
            *.tar.bz2)   tar xjf $fx     ;;
            *.tar.gz)    tar xzf $fx     ;;
            *.bz2)       bunzip2 $fx     ;;
            *.rar)       unrar e $fx     ;;
            *.gz)        gunzip $fx      ;;
            *.tar)       tar xf $fx      ;;
            *.tbz2)      tar xjf $fx     ;;
            *.tgz)       tar xzf $fx     ;;
            *.zip)       unzip $fx       ;;
            *.Z)         uncompress $fx  ;;
            *.7z)        7z x $fx        ;;
            *.tar.xz)    tar xf $fx      ;;
        esac
    }
}}

cmd delete ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
    printf "delete?[y/N]"
    read ans
    [ $ans = "y" ] && rm -rf -- $fx
}}

cmd moveto ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    clear; echo "Move to where?"
    dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
    for x in $fx; do
        eval mv -iv \"$x\" \"$dest\"
    done &&
    notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    clear; echo "Copy to where?"
    dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
    for x in $fx; do
        eval cp -ivr \"$x\" \"$dest\"
    done &&
    notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd setbg "$1"

cmd bulkrename ${{
    tmpfile_old="$(mktemp)"
    tmpfile_new="$(mktemp)"

    [ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)

    echo "$fs" > "$tmpfile_old"
    echo "$fs" > "$tmpfile_new"
    $EDITOR "$tmpfile_new"

    [ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || { rm -f "$tmpfile_old" "$tmpfile_new"; exit 1; }

    paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
    done

    rm -f "$tmpfile_old" "$tmpfile_new"
    lf -remote "send $id unselect"
}}

cmd setwallpaper ${{ setwallpaper "$f" }}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

# Trash bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd restore_trash ${{
  trash-restore
}}

# Traversal
cmd fzf $vi $(find . -name "$1" | fzf)
cmd z %{{
	result="$(zoxide query --exclude $PWD $@ | sed 's/\\/\\\\/g;s/"/\\"/g')"
	lf -remote "send $id cd \"$result\""
}}

cmd fzf_search ${{
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    res="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
    )"
    [ -n "$res" ] && lf -remote "send $id select \"$res\""
}}

cmd zi ${{
	result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
	lf -remote "send $id cd \"$result\""
}}

cmd on-select &{{
    lf -remote "send $id set statfmt \"$(eza -ld --color=always "$f")\""
}}


### --- Bindings --- ###
# Unbinding
map d
map m
# map gh

# Program
map W $setsid -f $TERMINAL >/dev/null 2>&1
map x $$f
map X !$f

# Basic Functions
map u restore_trash
map p paste
map y copy
map <enter> $$EDITOR "$f"
map V push :!nvim<space>
map bw setwallpaper
map <c-l> clear

# Acrchive
map au unarchive

# Create
map mf push :touch<space>""<left>
map md push :mkdir<space>-p<space>""<left>

# Copy
map C copyto
map Y $printf "%s" "$fx" | xclip -selection clipboard

# Delete
map dd delete

# Extract
map E extract

# Install (wine)
map ae $wine "$f"

# Move
map M moveto

# Open
# map o $mimeopen "$f"
# map O $mimeopen --ask "$f"
map o open

# Rename
map A :rename; cmd-end # at the very end
map c :rename; cmd-delete-home # filename
map C :rename; cmd-end; cmd-delete-home # entire filename
map I :rename; cmd-home # at the very beginning
map i :rename # before extension
map a :rename; cmd-right # after extension
map B bulkrename


# Traversal
map f $lf -remote "send $id select \"$(fzf)\""
# map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)"
map F push :z<space>
map J zi
map g. set hidden!
map gb cd ~/.local/bin
map gc cd ~/.config
map gd cd ~/Downloads
map gD cd ~/Documents
map gf :fzf_search
map gh cd ~
map gl cd ~/.config/lf
map gp cd ~/Pictures
map gr cd ~/.local/src
map gs cd ~/.local/share
map gt cd ~/.local/share/Trash/files
map gw cd ~/.local/share/wallpaper
map gv cd ~/Videos
map <c-r> reload
map <c-f> down
map <c-b> up

# Wallpaper
map bgf $setbg $f
map bgc wetwallpaper
